// Virtual Machine Authors - Dmitri, Tulio, Jerzy.

/*
	You can use these two print statements for the errors:
		printf("Virtual Machine Error: Stack Overflow Error\n");
		printf("Virtual Machine Error: Out of Bounds Access Error\n");
*/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "compiler.h"
#define REG_FILE_SIZE 10
#define MAX_STACK_LENGTH 100

// Stack = process address space

// Initialize a dynamic array.
int *init(int size);

// Print the array.
void printArray(int *pas, int size);

// Print output how professor wants.
void print_execution(int line, char *opname, instruction IR, int PC, int BP, int SP, int *stack, int *RF)
{
	int i;
	// print out instruction and registers
	printf("%2d\t%s\t%d\t%d\t%d\t%d\t%d\t%d\t\t", line, opname, IR.R, IR.L, IR.M, PC, SP, BP);
	
	// print register file
	for (i = 0; i < REG_FILE_SIZE; i++)
		printf("%d ", RF[i]);
	printf("\n");
	
	// print stack
	printf("stack:\t");
	for (i = MAX_STACK_LENGTH - 1; i >= SP; i--)
		printf("%d ", stack[i]);
	printf("\n");
}

// This function will be helpful to find a variable
// in a different Activation Record (AR) some L levels down:
// Find base L levels down.
// For example in the instruction:
// STO L, M  - You can do stack [base (IR.L) -  IR.M] = pas[SP]
// to store the content of  the top of the stack into an AR
// in the stack,  located L levels down from the current AR.
int base(int L, int BP, int *stack)
{
	int ctr = L;
	int rtn = BP;
	while (ctr > 0)
	{
		rtn = stack[rtn];
		ctr--;
	}
	return rtn;
}

void execute_program(instruction *code, int printFlag)
{
    char *opname;
    int i, counter = 0, op = 0, FLAG = 1, *pas, line = 0, IC = 0, num, k;
    IR *IR;

    // Global CPU variables.
    int BP, SP, PC, DP, GP, FREE;

    // Initialize all process address space to 0.
    pas = init(MAX_PAS_LENGTH);

    // Scan file and put each character in the array.
    while ((fscanf(ifp, "%d", &num)) != EOF)
    {
        // Read instructions from file into the process address space.
        pas[counter] = num;

        counter++;

        // Only increment the IC every instruction.
        // Once instruction is 3 array cells: <OP L M>
        if (counter % 3 == 0)
        {
            IC = IC + 3;
        }
    }

    // Dynamically allocate the instruction register.
    IR = calloc(1, sizeof(instruction));

    // Dynamically allocate 3 letters for opcode + 1 space for \0.
    opname = malloc(sizeof(char) * 4);

    // Global CPU variables.
    // bp - base pointer
    // sp - stack pointer
    // pc - program counter
    // dp - data pointer
    // gp - global data pointer
    // FREE - heap pointer
    // ic - instruction counter
    // ir - instruction register (as a struct)

    //    // Global Pointer – Points to DATA segment.
    //    GP = IC;
    //
    //    // Data Pointer – To access variables in Main.
    //    DP = IC - 1;
    //
    //    // FREE points to Heap.
    //    FREE = IC + 40;

    // Points to base of DATA or activation records.
    BP = MAX_STACK_LENGTH - 1;

    // Stack pointer – Points to top of stack.
    SP = BP + 1

    // Program counter begins with 0.
    PC = 0;

	// Display pre-compilation values.
	if (printFlag)
	{
		printf("\t\t\t\t\tPC\tSP\tBP\n");
		printf("Initial values:\t\t\t\t%d\t%d\t%d\n", PC, SP, BP);
	}

    // Instruction Set Architecture.
    while (FLAG)
    {
        if (DEBUG == 1)
        {
            printArray(pas, MAX_PAS_LENGTH);
        }

        // Fetch instruction.
        IR->OP = pas[PC];
        IR->L = pas[PC + 1];
        IR->M = pas[PC + 2];

        // Increment program counter by 3.
        line = PC / 3;
        PC = PC + 3;

        // Execute instruction.
        switch (IR->OP)
        {
                // LIT 0, M. Pushes a constant value (literal).
                // M onto the stack (or DATA).
                case 1:
                    RF[IR.R] = IR.M;

                    // Set up the opname.
                    opname[0] = 'L'; opname[1] = 'I'; opname[2] = 'T'; opname[3] = '\0';
                    break;

                // OPR 0, #. Operation to be performed on the
                // data at the top of the stack (or in data segment).
                case 2:
                    if (IR->M == 0) // RTN
                    {
                        SP = BP + 1;
                        BP = pas[SP - 2];
                        PC = pas[SP - 3];

                        // Set up the opname.
                        opname[0] = 'R'; opname[1] = 'T'; opname[2] = 'N'; opname[3] = '\0';
                    }
                    else
                    {
                        printf("Unrecognized IR->M value in main()\n");
                    }
                    break;

                // LOD L, M. Load value to top of stack from
                // the stack location at offset M from L lexicographical levels down.
                // (Or load a value into the data segment).
                case 3:
                    if (base(IR->L, BP, pas) - IR->M) < 0 || (base(IR->L, BP, pas) - IR->M) >= MAX_STACK_LENGTH)
                    {
                        printf("Virtual Machine Error: Out of Bounds Access Error\n");
                    }

                    RF[IR->R] = stack[base(IR->L, BP, pas) - RF[IR->M]];

                    // Set up the opname.
                    opname[0] = 'L'; opname[1] = 'O'; opname[2] = 'D'; opname[3] = '\0';
                    break;

                // STO L, M. Load value to top of stack from
                // the stack location at offset M from L lexicographical levels down.
                // (Or store a value into the data segment)
                case 4:
                    if (base(IR->L, BP, pas) - IR->M) < 0 || (base(IR->L, BP, pas) - IR->M) >= MAX_STACK_LENGTH)
                    {
                        printf("Virtual Machine Error: Out of Bounds Access Error\n");
                    }

                    stack[base(L) - RF[IR->M] = RF[IR->R]];

                    // Set up the opname.
                    opname[0] = 'S'; opname[1] = 'T'; opname[2] = 'O'; opname[3] = '\0';
                    break;

                // CAL L, M. Call procedure at code index M
                // (generates new Activation Record and PC = M)
                case 5:
                    pas[SP - 1]  =  base(IR->L, BP, pas); // Static link (SL)
                    pas[SP - 2]  = BP; // Dynamic link (DL)
                    pas[SP - 3]  = PC; // Return address (RA)
                    BP = SP - 1;
                    PC = IR->M;

                    // Set up the opname.
                    opname[0] = 'C'; opname[1] = 'A'; opname[2] = 'L'; opname[3] = '\0';
                    break;

                // INC 0, M. Allocate M memory words (increment SP by M).
                // (Or increment dp)
                case 6:
                    SP = (SP - IR->M);

                    if (SP < 0)
                    {
                        printf("Virtual Machine Error: Stack Overflow Error\n");
                    }

                    // Set up the opname.
                    opname[0] = 'I'; opname[1] = 'N'; opname[2] = 'C'; opname[3] = '\0';
                    break;

                // JMP 0, M. Jump to instruction M (PC = M).
                case 7:
                    PC = IR->M;

                    // Set up the opname.
                    opname[0] = 'J'; opname[1] = 'M'; opname[2] = 'P'; opname[3] = '\0';
                    break;

                // Follow the same syntax as above. End case with proper opname like JMP, JPC, etc.
                // Dmitri enter instructions 9 - 16 here.
                // Tulio enter instructions 17 - 23 here.
                case 17:
                    IR->R = IR->L % IR->M;

                    // Set up the opname.
                    opname[0] = 'M'; opname[1] = 'O'; opname[2] = 'R'; opname[3] = '\0';

                    break;
                case 18:
                    if (IR->L == IR->M)
                    {
                        IR->R = 1;
                    }
                    else
                    {
                        IR->R = 0;
                    }

                    // Set up the opname.
                    opname[0] = 'E'; opname[1] = 'Q'; opname[2] = 'L'; opname[3] = '\0';

                    break;
                case 19:
                    if (IR->L != IR->M)
                    {
                        IR->R = 1;
                    }
                    else
                    {
                        IR->R = 0;
                    }

                    // Set up the opname.
                    opname[0] = 'N'; opname[1] = 'E'; opname[2] = 'Q'; opname[3] = '\0';

                    break;
                case 20:
                    if (IR->L < IR->M)
                    {
                        IR->R = 1;
                    }
                    else
                    {
                        IR->R = 0;
                    }

                    // Set up the opname.
                    opname[0] = 'L'; opname[1] = 'S'; opname[2] = 'S'; opname[3] = '\0';

                    break;
                case 21:
                    if (IR->L <= IR->M)
                    {
                        IR->R = 1;
                    }
                    else
                    {
                        IR->R = 0;
                    }

                    // Set up the opname.
                    opname[0] = 'L'; opname[1] = 'E'; opname[2] = 'Q'; opname[3] = '\0';

                    break;
                case 22:
                    if (IR->L > IR->M)
                    {
                        IR->R = 1;
                    }
                    else
                    {
                        IR->R = 0;
                    }

                    // Set up the opname.
                    opname[0] = 'G'; opname[1] = 'T'; opname[2] = 'R'; opname[3] = '\0';

                    break;
                case 23:
                    if (IR->L >= IR->M)
                    {
                        IR->R = 1;
                    }
                    else
                    {
                        IR->R = 0;
                    }

                    // Set up the opname.
                    opname[0] = 'G'; opname[1] = 'E'; opname[2] = 'Q'; opname[3] = '\0';

                    break;
                default:
                    printf("Instruction operation doesn't work");
                    break;
        }

        // Print CPU register information.
        print_execution(line, opname, IR, PC, BP, SP, DP, pas, GP);
    }

    // Free memory for pas.
    if (pas != NULL)
    {
        free(pas);
    }

    // Free memory for IR.
    if (IR != NULL)
    {
        free(IR);
    }

    // Free opname for IR.
    if (opname != NULL)
    {
        free(opname);
    }

    // Close the input file.
    fclose(ifp);
}

// Print the array.
void printArray(int *pas, int size)
{
    int i;

    printf("In printArray():\n");
    for (i = 0; i < 90; i++)
    {
        printf("%d%c", pas[i], (((i + 1) % 3 == 0) && (i != 0)) ? '\n' : ' ');
    }
}

// Initialize a dynamic array.
int *init(int size)
{
    int *arr, i;

    arr = malloc(sizeof(int) * size);

    // Default set to 0.
    for (i = 0; i < size; i++)
    {
        arr[i] = 0;
    }

    return arr;
}
